<#@ include file="T4Toolbox.tt" #>
<#@ assembly name="C:\Prism\GitRepositiory\GenSoft\Revolution\Amoeba\T4 Templates\bin\Debug\T4Entities.dll" #>
<#@ import namespace="T4Entities" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#+
// <copyright file="EFEntityTemplate.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class NavigationEntityViewModelTemplate : CSharpTemplate
{
	public NavigationEntityViewModelTemplate(EntityView entityView, string appName)
	{
	    EntityView = entityView;
	    AppName = appName;
	}

    public EntityView EntityView { get;}
		public string AppName { get; }

	public override string TransformText()
	{
		base.TransformText();
	    
#>

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Linq;
using Core.Common.UI;
using CommonMessages;
using EventAggregator;
using Entity.Expressions;
using <#=AppName#>.Entities;
using EventMessages;

using Utilities;

namespace ViewModels
{
	public partial class <#=EntityView.Name#>ViewModel_AutoGen 
	{
		Source Source => new Source(new MessageSource(this.ToString()), new MachineInfo(Environment.MachineName, Environment.ProcessorCount));
		protected virtual void WireEvents()
		{

			EventMessageBus.Current.GetEvent<CurrentEntityChanged<I<#=EntityView.Entity.Name #>>>(Source).Subscribe(x => handle<#=EntityView.Entity.Name #>Changed(x.EntityId));  
			EventMessageBus.Current.GetEvent<EntityUpdated<I<#=EntityView.Entity.Name #>>>(Source).Subscribe(x => handle<#=EntityView.Entity.Name #>Changed(x.Entity.Id));     
                
		}

		private void handle<#=EntityView.Entity.Name#>Changed(int entityId)
		{
					
			if(entityId != EntityStates.NullEntity)
			if(CurrentEntity.Id == EntityStates.NullEntity || CurrentEntity.Id != entityId)
			{
				CurrentEntity = CreateNullEntity();
				EventMessageBus.Current.Publish(new LoadEntityViewWithFilter<I<#=EntityView.Entity.Name #>>(x => x.Id == entityId, <#=EntityView.Entity.Name #>Expressions.<#=EntityView.Entity.Name #>To<#=EntityView.Name #>Expression,typeof(I<#=EntityView.Name #>), typeof(<#=EntityView.Name #>), msgSource), msgSource);
			}
		}

	}
}
<#+
		return this.GenerationEnvironment.ToString();
	}
}
#>
