// <autogenerated>
//   This file was generated by T4 code generator MRManger-DataEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using GenSoft.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace GenSoft.Mappings
{
	public class xcuda_TransportMap
	{
		public static void Map(EntityTypeBuilder<Entities.xcuda_Transport> entityBuilder)
		{
			entityBuilder.ToTable("xcuda_Transport", "dbo");
			entityBuilder.HasKey(t => t.Transport_Id);
			entityBuilder.Property(t => t.Transport_Id).HasColumnName("Transport_Id").UseSqlServerIdentityColumn();	
			entityBuilder.Property(t => t.ASYCUDA_Id).HasColumnName("ASYCUDA_Id").IsRequired();
			entityBuilder.Property(t => t.Container_flag).HasColumnName("Container_flag").IsRequired();
			entityBuilder.Property(t => t.Location_of_goods).HasColumnName("Location_of_goods").IsRequired().HasMaxLength(50);
			entityBuilder.Property(t => t.Single_waybill_flag).HasColumnName("Single_waybill_flag").IsRequired();
		//-------------------Navigation Properties -------------------------------//
				entityBuilder.HasMany(x => x.xcuda_Border_office).WithOne(p => p.xcuda_Transport).HasForeignKey(c => c.Transport_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.xcuda_Delivery_terms).WithOne(p => p.xcuda_Transport).HasForeignKey(c => c.Transport_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.xcuda_Means_of_transport).WithOne(p => p.xcuda_Transport).HasForeignKey(c => c.Transport_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.xcuda_Place_of_loading).WithOne(p => p.xcuda_Transport).HasForeignKey(c => c.Transport_Id).OnDelete(DeleteBehavior.Restrict);
	
				//----------------Parent Properties
				//entityBuilder.HasOne(p => p.xcuda_ASYCUDA xcuda_ASYCUDA).WithMany(p => p.xcuda_Transport).HasForeignKey(c => c.ASYCUDA_Id).OnDelete(DeleteBehavior.Restrict);
	
		}
	}
}
