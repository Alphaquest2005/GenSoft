// <autogenerated>
//   This file was generated by T4 code generator MRManger-DataEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using GenSoft.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace GenSoft.Mappings
{
	public class xcuda_ContainerMap
	{
		public static void Map(EntityTypeBuilder<Entities.xcuda_Container> entityBuilder)
		{
			entityBuilder.ToTable("xcuda_Container", "dbo");
			entityBuilder.HasKey(t => t.Container_Id);
			entityBuilder.Property(t => t.Container_Id).HasColumnName("Container_Id").UseSqlServerIdentityColumn();	
			entityBuilder.Property(t => t.ASYCUDA_Id).HasColumnName("ASYCUDA_Id").IsRequired();
			entityBuilder.Property(t => t.Container_identity).HasColumnName("Container_identity").IsRequired().HasMaxLength(Int32.MaxValue);
			entityBuilder.Property(t => t.Container_type).HasColumnName("Container_type").IsRequired().HasMaxLength(Int32.MaxValue);
			entityBuilder.Property(t => t.Empty_full_indicator).HasColumnName("Empty_full_indicator").IsRequired().HasMaxLength(Int32.MaxValue);
			entityBuilder.Property(t => t.Goods_description).HasColumnName("Goods_description").IsRequired().HasMaxLength(Int32.MaxValue);
			entityBuilder.Property(t => t.Gross_weight).HasColumnName("Gross_weight").IsRequired();
			entityBuilder.Property(t => t.Item_Number).HasColumnName("Item_Number").IsRequired().HasMaxLength(Int32.MaxValue);
			entityBuilder.Property(t => t.Packages_number).HasColumnName("Packages_number").IsRequired().HasMaxLength(Int32.MaxValue);
			entityBuilder.Property(t => t.Packages_type).HasColumnName("Packages_type").IsRequired().HasMaxLength(Int32.MaxValue);
			entityBuilder.Property(t => t.Packages_weight).HasColumnName("Packages_weight").IsRequired();
		//-------------------Navigation Properties -------------------------------//
	
				//----------------Parent Properties
				//entityBuilder.HasOne(p => p.xcuda_ASYCUDA xcuda_ASYCUDA).WithMany(p => p.xcuda_Container).HasForeignKey(c => c.ASYCUDA_Id).OnDelete(DeleteBehavior.Restrict);
	
		}
	}
}
