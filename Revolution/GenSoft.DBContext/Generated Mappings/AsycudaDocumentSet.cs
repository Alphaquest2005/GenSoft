// <autogenerated>
//   This file was generated by T4 code generator MRManger-DataEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using GenSoft.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace GenSoft.Mappings
{
	public class AsycudaDocumentSetMap
	{
		public static void Map(EntityTypeBuilder<Entities.AsycudaDocumentSet> entityBuilder)
		{
			entityBuilder.ToTable("AsycudaDocumentSet", "dbo");
			entityBuilder.HasKey(t => t.Id);
			entityBuilder.Property(t => t.Id).HasColumnName("Id").UseSqlServerIdentityColumn();	
			entityBuilder.Property(t => t.CountryOfOriginCodeId).HasColumnName("CountryOfOriginCodeId").IsRequired();
			entityBuilder.Property(t => t.CurrencyCodeId).HasColumnName("CurrencyCodeId").IsRequired();
			entityBuilder.Property(t => t.Customs_ProcedureId).HasColumnName("Customs_ProcedureId").IsRequired();
			entityBuilder.Property(t => t.Declarant_Reference_Number).HasColumnName("Declarant_Reference_Number").IsRequired().HasMaxLength(50);
			entityBuilder.Property(t => t.Description).HasColumnName("Description").IsRequired().HasMaxLength(255);
			entityBuilder.Property(t => t.Document_TypeId).HasColumnName("Document_TypeId").IsRequired();
		//-------------------Navigation Properties -------------------------------//
				entityBuilder.HasMany(x => x.AsycudaDocumentSetEntryData).WithOne(p => p.AsycudaDocumentSet).HasForeignKey(c => c.AsycudaDocumentSetId).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.xcuda_ASYCUDA_ExtendedProperties).WithOne(p => p.AsycudaDocumentSet).HasForeignKey(c => c.AsycudaDocumentSetId).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.DocumentSetManifesto).WithOne(p => p.AsycudaDocumentSet).HasForeignKey<DocumentSetManifesto>(c => c.Id).OnDelete(DeleteBehavior.Restrict);
	
				//----------------Parent Properties
				//entityBuilder.HasOne(p => p.Countries Countries).WithMany(p => p.AsycudaDocumentSet).HasForeignKey(c => c.CountryOfOriginCodeId).OnDelete(DeleteBehavior.Restrict);
				//entityBuilder.HasOne(p => p.Currencies Currencies).WithMany(p => p.AsycudaDocumentSet).HasForeignKey(c => c.CurrencyCodeId).OnDelete(DeleteBehavior.Restrict);
	
		}
	}
}
