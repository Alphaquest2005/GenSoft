// <autogenerated>
//   This file was generated by T4 code generator MRManger-DataEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using GenSoft.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace GenSoft.Mappings
{
	public class TypeMap
	{
		public static void Map(EntityTypeBuilder<Entities.Type> entityBuilder)
		{
			entityBuilder.ToTable("Types", "dbo");
			entityBuilder.HasKey(t => t.Id);
			entityBuilder.Property(t => t.Id).HasColumnName("Id").UseSqlServerIdentityColumn();	
			entityBuilder.Property(t => t.Name).HasColumnName("Name").IsRequired().HasMaxLength(50);
		//-------------------Navigation Properties -------------------------------//
				entityBuilder.HasOne(p => p.DataType).WithOne(p => p.Type).HasForeignKey<DataType>(c => c.Id).OnDelete(DeleteBehavior.Restrict);//Id//Id//
				entityBuilder.HasMany(x => x.EntityTypes).WithOne(p => p.Type).HasForeignKey(c => c.TypeId).OnDelete(DeleteBehavior.Restrict);//TypeId//Id//
				entityBuilder.HasOne(p => p.EventType).WithOne(p => p.Type).HasForeignKey<EventType>(c => c.Id).OnDelete(DeleteBehavior.Restrict);//Id//Id//
				entityBuilder.HasOne(p => p.SourceType).WithOne(p => p.Type).HasForeignKey<SourceType>(c => c.Id).OnDelete(DeleteBehavior.Restrict);//Id//Id//
				entityBuilder.HasMany(x => x.ChildTypes).WithOne(p => p.ChildType).HasForeignKey(c => c.ChildTypeId).OnDelete(DeleteBehavior.Restrict);//ChildTypeId//Id//TypeId
				entityBuilder.HasMany(x => x.ParentTypes).WithOne(p => p.ParentType).HasForeignKey(c => c.ParentTypeId).OnDelete(DeleteBehavior.Restrict);//ParentTypeId//Id//TypeId
				entityBuilder.HasMany(x => x.Types).WithOne(p => p.Type).HasForeignKey(c => c.TypeId).OnDelete(DeleteBehavior.Restrict);//TypeId//Id//ChildTypeId
	
				//----------------Parent Properties
	
		}
	}
}
