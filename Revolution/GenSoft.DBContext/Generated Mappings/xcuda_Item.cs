// <autogenerated>
//   This file was generated by T4 code generator MRManger-DataEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using GenSoft.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace GenSoft.Mappings
{
	public class xcuda_ItemMap
	{
		public static void Map(EntityTypeBuilder<Entities.xcuda_Item> entityBuilder)
		{
			entityBuilder.ToTable("xcuda_Item", "dbo");
			entityBuilder.HasKey(t => t.Item_Id);
			entityBuilder.Property(t => t.Item_Id).HasColumnName("Item_Id").UseSqlServerIdentityColumn();	
			entityBuilder.Property(t => t.Amount_deducted_from_licence).HasColumnName("Amount_deducted_from_licence").IsRequired().HasMaxLength(Int32.MaxValue);
			entityBuilder.Property(t => t.ASYCUDA_Id).HasColumnName("ASYCUDA_Id").IsRequired();
			entityBuilder.Property(t => t.AttributeOnlyAllocation).HasColumnName("AttributeOnlyAllocation").IsRequired();
			entityBuilder.Property(t => t.DFQtyAllocated).HasColumnName("DFQtyAllocated").IsRequired();
			entityBuilder.Property(t => t.DoNotAllocate).HasColumnName("DoNotAllocate").IsRequired();
			entityBuilder.Property(t => t.DoNotEX).HasColumnName("DoNotEX").IsRequired();
			entityBuilder.Property(t => t.DPQtyAllocated).HasColumnName("DPQtyAllocated").IsRequired();
			entityBuilder.Property(t => t.EntryDataDetailsId).HasColumnName("EntryDataDetailsId").IsRequired();
			entityBuilder.Property(t => t.EntryTimeStamp).HasColumnName("EntryTimeStamp").IsRequired();
			entityBuilder.Property(t => t.Free_text_1).HasColumnName("Free_text_1").IsRequired().HasMaxLength(Int32.MaxValue);
			entityBuilder.Property(t => t.Free_text_2).HasColumnName("Free_text_2").IsRequired().HasMaxLength(Int32.MaxValue);
			entityBuilder.Property(t => t.ImportComplete).HasColumnName("ImportComplete").IsRequired();
			entityBuilder.Property(t => t.IsAssessed).HasColumnName("IsAssessed").IsRequired();
			entityBuilder.Property(t => t.Licence_number).HasColumnName("Licence_number").IsRequired().HasMaxLength(Int32.MaxValue);
			entityBuilder.Property(t => t.LineNumber).HasColumnName("LineNumber").IsRequired();
			entityBuilder.Property(t => t.Quantity_deducted_from_licence).HasColumnName("Quantity_deducted_from_licence").IsRequired().HasMaxLength(Int32.MaxValue);
			entityBuilder.Property(t => t.SalesFactor).HasColumnName("SalesFactor").IsRequired();
			entityBuilder.Property(t => t.WarehouseError).HasColumnName("WarehouseError").IsRequired().HasMaxLength(50);
		//-------------------Navigation Properties -------------------------------//
				entityBuilder.HasMany(x => x.SubItems).WithOne(p => p.xcuda_Item).HasForeignKey(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.xcuda_Attached_documents).WithOne(p => p.xcuda_Item).HasForeignKey(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.xcuda_Goods_description).WithOne(p => p.xcuda_Item).HasForeignKey<xcuda_Goods_description>(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.xcuda_Tarification).WithOne(p => p.xcuda_Item).HasForeignKey<xcuda_Tarification>(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.xcuda_Taxation).WithOne(p => p.xcuda_Item).HasForeignKey(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.xcuda_Valuation_item).WithOne(p => p.xcuda_Item).HasForeignKey<xcuda_Valuation_item>(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.xcuda_Packages).WithOne(p => p.xcuda_Item).HasForeignKey(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.xcuda_Previous_doc).WithOne(p => p.xcuda_Item).HasForeignKey<xcuda_Previous_doc>(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.xcuda_PreviousItem).WithOne(p => p.xcuda_Item).HasForeignKey<xcuda_PreviousItem>(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.xcuda_Suppliers_link).WithOne(p => p.xcuda_Item).HasForeignKey(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasMany(x => x.xcuda_ItemEntryDataDetails).WithOne(p => p.xcuda_Item).HasForeignKey(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
	
				//----------------Parent Properties
				//entityBuilder.HasOne(p => p.xcuda_ASYCUDA xcuda_ASYCUDA).WithMany(p => p.xcuda_Item).HasForeignKey(c => c.ASYCUDA_Id).OnDelete(DeleteBehavior.Restrict);
	
		}
	}
}
