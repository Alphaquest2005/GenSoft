// <autogenerated>
//   This file was generated by T4 code generator MRManger-DataEntities.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using GenSoft.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace GenSoft.Mappings
{
	public class xcuda_Valuation_itemMap
	{
		public static void Map(EntityTypeBuilder<Entities.xcuda_Valuation_item> entityBuilder)
		{
			entityBuilder.ToTable("xcuda_Valuation_item", "dbo");
			entityBuilder.HasKey(t => t.Item_Id);
			entityBuilder.Property(t => t.Item_Id).HasColumnName("Item_Id").ValueGeneratedNever();	
			entityBuilder.Property(t => t.Item_Id).HasColumnName("Item_Id").IsRequired();
			entityBuilder.Property(t => t.Alpha_coeficient_of_apportionment).HasColumnName("Alpha_coeficient_of_apportionment").IsRequired().HasMaxLength(Int32.MaxValue);
			entityBuilder.Property(t => t.Rate_of_adjustement).HasColumnName("Rate_of_adjustement").IsRequired();
			entityBuilder.Property(t => t.Statistical_value).HasColumnName("Statistical_value").IsRequired();
			entityBuilder.Property(t => t.Total_CIF_itm).HasColumnName("Total_CIF_itm").IsRequired();
			entityBuilder.Property(t => t.Total_cost_itm).HasColumnName("Total_cost_itm").IsRequired();
		//-------------------Navigation Properties -------------------------------//
				entityBuilder.HasOne(p => p.xcuda_item_deduction).WithOne(p => p.xcuda_Valuation_item).HasForeignKey<xcuda_item_deduction>(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.xcuda_item_external_freight).WithOne(p => p.xcuda_Valuation_item).HasForeignKey<xcuda_item_external_freight>(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.xcuda_item_insurance).WithOne(p => p.xcuda_Valuation_item).HasForeignKey<xcuda_item_insurance>(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.xcuda_item_internal_freight).WithOne(p => p.xcuda_Valuation_item).HasForeignKey<xcuda_item_internal_freight>(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.xcuda_Item_Invoice).WithOne(p => p.xcuda_Valuation_item).HasForeignKey<xcuda_Item_Invoice>(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.xcuda_item_other_cost).WithOne(p => p.xcuda_Valuation_item).HasForeignKey<xcuda_item_other_cost>(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.xcuda_Market_valuer).WithOne(p => p.xcuda_Valuation_item).HasForeignKey<xcuda_Market_valuer>(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
				entityBuilder.HasOne(p => p.xcuda_Weight_itm).WithOne(p => p.xcuda_Valuation_item).HasForeignKey<xcuda_Weight_itm>(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
	
				//----------------Parent Properties
				//entityBuilder.HasOne(p => p.xcuda_Item xcuda_Item).WithOne(p => p.xcuda_Valuation_item).HasForeignKey<xcuda_Item>(c => c.Item_Id).OnDelete(DeleteBehavior.Restrict);
	
		}
	}
}
