// <autogenerated>
//   This file was generated by T4 code generator MRManger-DBContext.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Data;
using GenSoft.Entities;
using System.ComponentModel;
using Microsoft.EntityFrameworkCore;

namespace GenSoft.DBContexts
{
	public partial class GenSoftDBContext
	{
		private static readonly GenSoftDBContext _instance = new GenSoftDBContext();

		public static GenSoftDBContext Instance => _instance;

		static GenSoftDBContext()
		{
			if (System.ComponentModel.LicenseManager.UsageMode == LicenseUsageMode.Designtime) return;
			Instance.Database.EnsureDeleted();
			Instance.Database.EnsureCreated();
			CreateSeedData();
		}

		private static void CreateSeedData()
		{
				Instance.Database.ExecuteSqlCommand(@"
					SET IDENTITY_INSERT dbo.Agent ON
						Insert Into dbo.Agent (UserName,Id) Values('System','0')
						Insert Into dbo.Agent (UserName,Id) Values('joe','2')
					SET IDENTITY_INSERT dbo.Agent OFF");
				Instance.Database.ExecuteSqlCommand(@"
					SET IDENTITY_INSERT dbo.Machine ON
						Insert Into dbo.Machine (Id,MachineName,Processors) Values('1','ALPHAQUEST-PC','8')
					SET IDENTITY_INSERT dbo.Machine OFF");
				Instance.Database.ExecuteSqlCommand(@"
					SET IDENTITY_INSERT dbo.ProcessStateTrigger ON
						Insert Into dbo.ProcessStateTrigger (Id,Name) Values('1','All')
						Insert Into dbo.ProcessStateTrigger (Id,Name) Values('2','Any')
					SET IDENTITY_INSERT dbo.ProcessStateTrigger OFF");
				Instance.Database.ExecuteSqlCommand(@"
					SET IDENTITY_INSERT dbo.State ON
						Insert Into dbo.State (Id,Name) Values('1','Started')
						Insert Into dbo.State (Id,Name) Values('2','Loaded')
						Insert Into dbo.State (Id,Name) Values('3','Completed')
					SET IDENTITY_INSERT dbo.State OFF");
				Instance.Database.ExecuteSqlCommand(@"
					SET IDENTITY_INSERT dbo.Type ON
						Insert Into dbo.Type (Id,Name) Values('1','IServiceManager')
						Insert Into dbo.Type (Id,Name) Values('2','Process')
						Insert Into dbo.Type (Id,Name) Values('3','ScreenModel')
					SET IDENTITY_INSERT dbo.Type OFF");
				Instance.Database.ExecuteSqlCommand(@"
					SET IDENTITY_INSERT dbo.Process ON
						Insert Into dbo.Process (UserId,Id,Description,Name,ParentProcessId,Symbol) Values('0','1','Prepare system for Intial Use','Starting System','0','Start')
						Insert Into dbo.Process (UserId,Id,Description,Name,ParentProcessId,Symbol) Values('0','2','User Login','User SignOn','1','User')
						Insert Into dbo.Process (UserId,Id,Description,Name,ParentProcessId,Symbol) Values('0','3','User Screen','Load User Screen','2','UserScreen')
					SET IDENTITY_INSERT dbo.Process OFF");
			//No test data for SourceType
			//No test data for MessageSource
			//No test data for Message
			//No test data for Entity
				Instance.Database.ExecuteSqlCommand(@"
						Insert Into dbo.EntityType (Id) Values('1')
						Insert Into dbo.EntityType (Id) Values('2')
						Insert Into dbo.EntityType (Id) Values('3')
");
				Instance.Database.ExecuteSqlCommand(@"
					SET IDENTITY_INSERT dbo.ProcessState ON
						Insert Into dbo.ProcessState (EntityTypeId,Id,Name,ProcessId,StateId,Predicate) Values('1','1','ServiceManagerStarted','1','1','entity != null')
						Insert Into dbo.ProcessState (EntityTypeId,Id,Name,ProcessId,StateId,Predicate) Values('2','2','Process0Started','1','1','entity is IProcessStarted')
						Insert Into dbo.ProcessState (EntityTypeId,Id,Name,ProcessId,StateId,Predicate) Values('3','3','ScreenViewCreated','1','1','entity is IScreenModel')
						Insert Into dbo.ProcessState (EntityTypeId,Id,Name,ProcessId,StateId,Predicate) Values('3','4','ScreenViewLoaded','1','2','entity is IViewModelLoaded<IMainWindowViewModel,IScreenModel>')
						Insert Into dbo.ProcessState (EntityTypeId,Id,Name,ProcessId,StateId,Predicate) Values('2','5','Process0Completed','1','3','entity.Id == 1 && entity is ISystemProcessCompleted')
					SET IDENTITY_INSERT dbo.ProcessState OFF");
			//No test data for Event
				Instance.Database.ExecuteSqlCommand(@"
						Insert Into dbo.ProcessComplexState (Id,StateTriggerId) Values('1','1')
						Insert Into dbo.ProcessComplexState (Id,StateTriggerId) Values('5','1')
");
				Instance.Database.ExecuteSqlCommand(@"
					SET IDENTITY_INSERT dbo.ProcessComplexStateExpectedProcessState ON
						Insert Into dbo.ProcessComplexStateExpectedProcessState (ComplexStateId,Id,ProcessStateId) Values('1','1','1')
						Insert Into dbo.ProcessComplexStateExpectedProcessState (ComplexStateId,Id,ProcessStateId) Values('5','7','2')
						Insert Into dbo.ProcessComplexStateExpectedProcessState (ComplexStateId,Id,ProcessStateId) Values('5','2','3')
						Insert Into dbo.ProcessComplexStateExpectedProcessState (ComplexStateId,Id,ProcessStateId) Values('5','3','4')
					SET IDENTITY_INSERT dbo.ProcessComplexStateExpectedProcessState OFF");
				Instance.Database.ExecuteSqlCommand(@"
						Insert Into dbo.ProcessStateInfo (Id,Status,Notes) Values('1','Service Manager Started','Service Manager Started')
						Insert Into dbo.ProcessStateInfo (Id,Status,Notes) Values('2','ProcessStarted','Process 0 Started ')
						Insert Into dbo.ProcessStateInfo (Id,Status,Notes) Values('3','ScreenView Created','This view contains all views')
");
				Instance.Database.ExecuteSqlCommand(@"
					SET IDENTITY_INSERT dbo.StateAction ON
						Insert Into dbo.StateAction (Id,ProcessStateId,ActionId) Values('5','1','1')
						Insert Into dbo.StateAction (Id,ProcessStateId,ActionId) Values('6','5','3')
					SET IDENTITY_INSERT dbo.StateAction OFF");
			//No test data for Command
				Instance.Database.ExecuteSqlCommand(@"
						Insert Into dbo.StateActionExpectedProcessState (ExpectedProcesStateId,Id) Values('2','5')
");
			//No test data for User
			//No test data for TypeParameter
		}
               
			
		
	}
}
