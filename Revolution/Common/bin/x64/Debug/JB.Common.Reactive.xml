<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JB.Common.Reactive</name>
    </assembly>
    <members>
        <member name="T:JB.Reactive.ExtensionMethods.ActionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Action"/> instances
            </summary>
        </member>
        <member name="M:JB.Reactive.ExtensionMethods.ActionExtensions.ToObservable(System.Action,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that schedules the given <paramref name="action"/> on the <paramref name="scheduler"/> for immediate execution upon subscription.
            </summary>
            <param name="action">Action to run on subscription on the <paramref name="scheduler"/>.</param>
            <param name="scheduler">Scheduler to run the <paramref name="action"/> on.</param>
            <returns>
            An observable sequence exposing a Unit value upon scheduling of the <paramref name="action"/>, or an exception.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="action"/> or <paramref name="scheduler"/> is  null.
            </exception>
        </member>
        <member name="T:JB.Reactive.ExtensionMethods.FuncExtensions">
            <summary>
            Extension methods for <see cref="T:System.Func`1"/> instances
            </summary>
        </member>
        <member name="M:JB.Reactive.ExtensionMethods.FuncExtensions.ToObservable``1(System.Func{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that invokes the <paramref name="func"/> synchronously upon subscription and returns its result.
            </summary>
            <param name="func">Function to run on subscription.</param>
            <param name="scheduler">Scheduler to run the <paramref name="func"/> on.</param>
            <returns>
            An observable sequence exposing the result value upon completion of the given <paramref name="func"/>, or an exception if one occured.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is null.</exception>
        </member>
        <member name="T:JB.Reactive.ExtensionMethods.GenericExtensions">
            <summary>
            Extension methods for <see cref="T:System.Object"/> instances.
            </summary>
        </member>
        <member name="M:JB.Reactive.ExtensionMethods.GenericExtensions.AsObservable``1(``0,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Converts the given <paramref name="instance" /> to an observerable stream of <typeparamref name="TResult" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="instance">The instance.</param>
            <param name="scheduler">The scheduler to perform conversion on.</param>
            <returns>
            An observable sequence of <typeparamref name="TResult" /> instances.
            </returns>
            <remarks>
            If <paramref name="instance" /> is an <see cref="T:System.IObservable`1" />, it is returned as is.
            If <paramref name="instance" /> is an <see cref="T:System.Collections.Generic.IEnumerable`1" />, it will be iterated and its values piped into the observable stream.
            Otherwise, the <paramref name="instance" /> will be returned as-is.
            </remarks>
        </member>
        <member name="P:JB.Reactive.INotifyObserverExceptions.ObserverExceptions">
            <summary>
            Provides an observable sequence of <see cref="T:JB.Reactive.ObserverException">exceptions</see> thrown by observers.
            An <see cref="T:JB.Reactive.ObserverException"/> provides a <see cref="P:JB.Reactive.ObserverException.Handled"/> property, if set to [true] by
            any of the observers of <see cref="P:JB.Reactive.INotifyObserverExceptions.ObserverExceptions"/> observable, it is assumed to be safe to continue
            without re-throwing the exception.
            </summary>
            <value>
            An observable stream of unhandled exceptions.
            </value>
        </member>
        <member name="T:JB.Reactive.Linq.Observable">
            <summary>
            Helper methods for <see cref="T:System.IObservable`1"/> instances
            </summary>
        </member>
        <member name="M:JB.Reactive.Linq.Observable.Run(System.Action,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Invokes the <paramref name="action"/> synchronously upon subscription.
            </summary>
            <param name="action">Action to run on subscription.</param>
            <param name="scheduler">Scheduler to perform the <paramref name="action"/> on.</param>
            <returns>
            An observable sequence signaling the completion of the given <paramref name="action"/>, or an exception if one occured.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null.</exception>
        </member>
        <member name="M:JB.Reactive.Linq.Observable.Run``1(System.Func{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Invokes the <paramref name="action"/> synchronously upon subscription and returns its return value.
            </summary>
            <param name="action">Action to run on subscription.</param>
            <param name="scheduler">Scheduler to perform the <paramref name="action"/> on.</param>
            <returns>
            An observable sequence exposing the result value upon completion of the given <paramref name="action"/>, or an exception if one occured.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null.</exception>
        </member>
        <member name="T:JB.Reactive.Linq.ObservableExtensions">
            <summary>
            Extension Methods for <see cref="T:System.IObservable`1"/> instances.
            </summary>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.Run``1(System.IObservable{``0},System.Action,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Invokes an action for each element in the observable sequence and signals when the <paramref name="action"/> completed.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="action">Action to invoke for each element in the observable sequence.</param>
            <param name="scheduler">Scheduler to perform the <paramref name="action"/> on.</param>
            <returns>
            An observable sequence of <see cref="T:System.Reactive.Unit"/> that signals the completion of an <paramref name="action"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.Run``1(System.IObservable{``0},System.Action{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Invokes an action for each element in the observable sequence and signals when the <paramref name="action"/> completed.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="action">Action to invoke for each element in the observable sequence.</param>
            <param name="scheduler">Scheduler to perform the <paramref name="action"/> on.</param>
            <returns>
            An observable sequence of <see cref="T:System.Reactive.Unit"/> that signals the completion of an <paramref name="action"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.Select``2(System.IObservable{``0},System.Func{``0,``1},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Projects each element of the <paramref name="source"/> sequence to the <typeparamref name="TTarget"/> type using the <paramref name="action"/> provided.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TTarget">The target type of the projection.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="action">Projection to invoke for each element in the observable sequence.</param>
            <param name="scheduler">Scheduler to perform the <paramref name="action" /> on.</param>
            <returns>
            An observable sequence of <see cref="T:System.Reactive.Unit" /> that signals the completion of an <paramref name="action" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="action" /> is null.</exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.CatchAndForward``1(System.IObservable{``0},System.IObserver{JB.Reactive.ObserverException},System.Boolean,System.Boolean)">
            <summary>
            Continues an observable sequence that is terminated by an exception of the specified type with a reconnection to the source, if wanted.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence that may produce an exception.</param>
            <param name="exceptionsObserver">The exceptions observer that exceptions will be forwarded to for handling.</param>
            <param name="reconnectToSource">The observable sequence to re-connect to.</param>
            <param name="rethrowExceptionIfUnhandled">
                if set to <c>true</c> and the forwarded <see cref="T:JB.Reactive.ObserverException"/> was unhandled (by (not) setting its <see cref="P:JB.Reactive.ObserverException.Handled"/> flag),
                the exception will be re-thrown and therefore the sequence will exceptionally terminate and no reconnection to the <paramref name="source"/> will be made
                even if specified via <paramref name="reconnectToSource"/>.
            </param>
            <returns>
            An observable sequence containing the <paramref name="source" /> sequence's elements which will optionally be reconnected to in case an exception occurred.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="exceptionsObserver" /> is null.</exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.CatchAndForward``2(System.IObservable{``0},System.IObserver{JB.Reactive.ObserverException},System.Func{``1,System.String},System.Boolean,System.Boolean)">
            <summary>
            Continues an observable sequence that is terminated by an exception of the specified type with a reconnection to the source, if wanted.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TException">The type of the exception to catch and handle. Needs to derive from <see cref="T:System.Exception" />.</typeparam>
            <param name="source">The source sequence that may produce an exception.</param>
            <param name="exceptionsObserver">The exceptions observer that exceptions will be forwarded to for handling.</param>
            <param name="reconnectToSource">The observable sequence to re-connect to.</param>
            <param name="observerExceptionMessageBuilder">The <see cref="T:JB.Reactive.ObserverException"/> message builder.</param>
            <param name="rethrowExceptionIfUnhandled">
                if set to <c>true</c> and the forwarded <see cref="T:JB.Reactive.ObserverException"/> was unhandled (by (not) setting its <see cref="P:JB.Reactive.ObserverException.Handled"/> flag),
                the exception will be re-thrown and therefore the sequence will exceptionally terminate and no reconnection to the <paramref name="source"/> will be made
                even if specified via <paramref name="reconnectToSource"/>.
            </param>
            <returns>
            An observable sequence containing the <paramref name="source" /> sequence's elements which will optionally be reconnected to in case an exception occurred.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" />, <paramref name="exceptionsObserver" /> or <paramref name="observerExceptionMessageBuilder" /> is null.</exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.CatchAndForward``1(System.IObservable{``0},System.IObserver{JB.Reactive.ObserverException},System.IObservable{``0},System.Boolean)">
            <summary>
            Continues an observable sequence that is terminated by an exception of the specified type with the reconnection observable sequence provided.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence that may produce an exception.</param>
            <param name="exceptionsObserver">The exceptions observer that exceptions will be forwarded to for handling.</param>
            <param name="target">The observable sequence to re-connect to.</param>
            <param name="rethrowExceptionIfUnhandled">
                if set to <c>true</c> and the forwarded <see cref="T:JB.Reactive.ObserverException"/> was unhandled (by (not) setting its <see cref="P:JB.Reactive.ObserverException.Handled"/> flag),
                the exception will be re-thrown and therefore the sequence will exceptionally terminate and no reconnection to <paramref name="target"/> will be made.
            </param>
            <returns>
            An observable sequence containing the <paramref name="source" /> sequence's elements, followed by the elements produced by the <paramref name="target" />
            observable sequence in case an exception occurred.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" />, <paramref name="exceptionsObserver" /> or <paramref name="target" /> is null.</exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.CatchAndForward``2(System.IObservable{``0},System.IObserver{JB.Reactive.ObserverException},System.IObservable{``0},System.Func{``1,System.String},System.Boolean)">
            <summary>
            Continues an observable sequence that is terminated by an exception of the specified type with the reconnection observable sequence provided.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TException">The type of the exception to catch and handle. Needs to derive from <see cref="T:System.Exception" />.</typeparam>
            <param name="source">The source sequence that may produce an exception.</param>
            <param name="exceptionsObserver">The exceptions observer that exceptions will be forwarded to for handling.</param>
            <param name="reconnectionObservable">The observable sequence to re-connect to.</param>
            <param name="observerExceptionMessageBuilder">The <see cref="T:JB.Reactive.ObserverException"/> message builder.</param>
            <param name="rethrowExceptionIfUnhandled">
                if set to <c>true</c> and the forwarded <see cref="T:JB.Reactive.ObserverException"/> was unhandled (by (not) setting its <see cref="P:JB.Reactive.ObserverException.Handled"/> flag),
                the exception will be re-thrown and therefore the sequence will exceptionally terminate and no reconnection to <paramref name="reconnectionObservable"/> will be made.
            </param>
            <returns>
            An observable sequence containing the <paramref name="source" /> sequence's elements, followed by the elements produced by the <paramref name="reconnectionObservable" />
            observable sequence in case an exception occurred.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" />, <paramref name="exceptionsObserver" />, <paramref name="reconnectionObservable" /> or <paramref name="observerExceptionMessageBuilder" /> is null.</exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.SplitTwoWays``1(System.IObservable{``0},System.Func{``0,System.Boolean},System.IObserver{``0},System.IObserver{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Takes a source observable and splits its sequence forwarding into two target observers based on a given <paramref name="predicate"/> condition.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="predicate">A function to test each element for a condition whether to pipe the value into <paramref name="targetForTrue"/> or <paramref name="targetForFalse"/>.</param>
            <param name="targetForTrue">The target observer if <paramref name="predicate"/> returned [true].</param>
            <param name="targetForFalse">The target observer if <paramref name="predicate"/> returned [false].</param>
            <param name="scheduler">The scheduler to schedule observer notifications on, if any.</param>
            <returns></returns>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.Split``1(System.IObservable{``0},System.IObserver{``0}[])">
            <summary>
            Takes a source observable and forwards its sequence into target observers.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="targetObservers">The target observers to forward the sequence to.</param>
            <returns>An <see cref="T:System.IDisposable"/> representing the inner forwarding <paramref name="source"/> subscription.</returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.Split``1(System.IObservable{``0},System.Collections.Generic.IEnumerable{System.IObserver{``0}},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Takes a source observable and forwards its sequence into target observers.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="targetObservers">The target observers to forward the sequence to.</param>
            <param name="scheduler">The scheduler to schedule observer notifications on, if any.</param>
            <returns>
            An <see cref="T:System.IDisposable" /> representing the inner forwarding <paramref name="source" /> subscription.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.Split``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler,System.IObserver{``0}[])">
            <summary>
            Takes a source observable and forwards its sequence into target observers.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="scheduler">The scheduler to schedule observer notifications on.</param>
            <param name="targetObservers">The target observers to forward the sequence to.</param>
            <returns>An <see cref="T:System.IDisposable"/> representing the inner forwarding <paramref name="source"/> subscription.</returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.Merge``1(System.IObservable{``0},System.IObservable{``0}[])">
            <summary>
            Merges elements from multiple observable sequences into a single observable sequence,
            when specified a scheduler will be used for enumeration of and subscription to the sources.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="observable">First observable sequence.</param>
            <param name="others">The observable sequence(s) to merge <paramref name="observable"/> with.</param>
            <returns>
            The observable sequence that merges the elements of the given sequences.
            </returns>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.Merge``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler,System.IObservable{``0}[])">
            <summary>
            Merges elements from multiple observable sequences into a single observable sequence,
            when specified a scheduler will be used for enumeration of and subscription to the sources.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="observable">First observable sequence.</param>
            <param name="others">The observable sequence(s) to merge <paramref name="observable"/> with.</param>
            <param name="scheduler">Scheduler used to introduce concurrency for making subscriptions to the given sequences.</param>
            <returns>
            The observable sequence that merges the elements of the given sequences.
            </returns>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.Merge``1(System.IObservable{``0},System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Merges elements from multiple observable sequences into a single observable sequence,
            when specified a scheduler will be used for enumeration of and subscription to the sources.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="observable">First observable sequence.</param>
            <param name="others">The observable sequence(s) to merge <paramref name="observable"/> with.</param>
            <param name="scheduler">Scheduler used to introduce concurrency for making subscriptions to the given sequences.</param>
            <returns>
            The observable sequence that merges the elements of the given sequences.
            </returns>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.Forward``1(System.IObservable{``0},System.IObserver{``0}[])">
            <summary>
            Takes a source observable and forwards its sequence into target observers and returns the raw sequence back again.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="targetObservers">The target observers to forward the sequence to.</param>
            <returns>A new <see cref="T:System.IObservable`1"/> providing the full <paramref name="source"/> sequence</returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.Forward``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler,System.IObserver{``0}[])">
            <summary>
            Takes a source observable and forwards its sequence into target observers and returns the raw sequence back again..
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="scheduler">The scheduler to schedule observer notifications on.</param>
            <param name="targetObservers">The target observers.</param>
            <returns>
            A new <see cref="T:System.IObservable`1" /> providing the full <paramref name="source" /> sequence
            </returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.Forward``1(System.IObservable{``0},System.Collections.Generic.IEnumerable{System.IObserver{``0}},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Takes a source observable and forwards its sequence into target observers and returns the raw sequence back again..
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="scheduler">The scheduler to schedule observer notifications on, if any.</param>
            <param name="targetObservers">The target observers.</param>
            <returns>
            A new <see cref="T:System.IObservable`1" /> providing the full <paramref name="source" /> sequence
            </returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.BufferWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers which are produced based a specified condition OR when it is full.
            While the test is [true], the buffer will filled until the the source produces an element at the same time the condition is [false],
            then or whenever the <paramref name="count"/> is reach, the current buffer will be released.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
            <param name="source">Source sequence to produce buffers over.</param>
            <param name="predicate">A function to test each element for a condition whether current buffer can be released.</param>
            <param name="count"> Maximum element count of a window.</param>
            <returns>
            An observable sequence of buffers.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than or equal to zero.</exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.BufferWhile``1(System.IObservable{``0},System.Func{System.Boolean},System.Int32)">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers which are produced based a specified condition OR when it is full.
            While the test is [true], the buffer will filled until the the source produces an element at the same time the condition is [false],
            then or whenever the <paramref name="count"/> is reach, the current buffer will be released.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
            <param name="source">Source sequence to produce buffers over.</param>
            <param name="predicate">A function to test each element for a condition whether current buffer can be released.</param>
            <param name="count"> Maximum element count of a window.</param>
            <returns>
            An observable sequence of buffers.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than or equal to zero.</exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.BufferWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers which are produced based a specified condition.
            While the test is [true], the buffer will be filled until the the source produces an element at the same time the condition is [false],
            then the current buffer will be released.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
            <param name="source">Source sequence to produce buffers over.</param>
            <param name="predicate">A function to test each element for a condition whether current buffer can be released.</param>
            <returns>
            An observable sequence of buffers.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.BufferWhile``1(System.IObservable{``0},System.Func{System.Boolean})">
            <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers which are produced based a specified condition.
            While the test is [true], the buffer will filled until the the source produces an element at the same time the condition is [false], the current buffer will be released.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
            <param name="source">Source sequence to produce buffers over.</param>
            <param name="predicate">A function to test each element for a condition whether current buffer can be released.</param>
            <returns>
            An observable sequence of buffers.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.SkipContinuouslyWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Bypasses elements in an observable sequence while a specified condition is [true] and returns the elements whenever the condition is [false].
            
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An observable sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>
            An observable sequence that contains the elements from the input sequence that occur while the test specified by predicate does not pass.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.SkipContinuouslyWhile``1(System.IObservable{``0},System.Func{System.Boolean})">
            <summary>
            Bypasses elements in an observable sequence while a specified condition is [true] and returns the elements whenever the condition is [false].
            
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An observable sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>
            An observable sequence that contains the elements from the input sequence that occur while the test specified by predicate does not pass.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.TakeContinuouslyWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns elements from an observable sequence while a specified condition is [true] and discards the elements while the condition is [false].
            
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>
            An observable sequence that contains the elements from the input sequence that occur while the test specified by predicate passes.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:JB.Reactive.Linq.ObservableExtensions.TakeContinuouslyWhile``1(System.IObservable{``0},System.Func{System.Boolean})">
            <summary>
            Returns elements from an observable sequence while a specified condition is [true] and discards the elements while the condition is [false].
            
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>
            An observable sequence that contains the elements from the input sequence that occur while the test specified by predicate passes.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="P:JB.Reactive.ObserverException.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:JB.Reactive.ObserverException"/> has been handled.
            </summary>
            <value>
              <c>true</c> if handled; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.InvalidOperationException">Handled has already been set to true - a revert back to false is not permitted.</exception>
        </member>
        <member name="M:JB.Reactive.ObserverException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:JB.Reactive.ObserverException"/> class.
            </summary>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:JB.Reactive.ObserverException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:JB.Reactive.ObserverException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:JB.Reactive.ObserverException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:JB.Reactive.ObserverException"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:JB.Reactive.ObserverException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:JB.Reactive.Threading.AsyncReaderWriterLock">
            <summary>
            A TPL <see cref="T:System.Threading.Tasks.Task"/> and RX.Net compatible (Async)ReaderWriterLock.
            </summary>
        </member>
        <member name="P:JB.Reactive.Threading.AsyncReaderWriterLock.ConcurrentExclusiveSchedulerPair">
            <summary>
            Gets the underlying <see cref="P:JB.Reactive.Threading.AsyncReaderWriterLock.ConcurrentExclusiveSchedulerPair"/>.
            </summary>
            <value>
            The concurrent exclusive scheduler pair.
            </value>
        </member>
        <member name="P:JB.Reactive.Threading.AsyncReaderWriterLock.ConcurrentNonExclusiveTaskFactory">
            <summary>
            Gets the <see cref="T:System.Threading.Tasks.TaskFactory"/> to schedule concurrent, reader tasks.
            </summary>
            <value>
            The reader scheduler.
            </value>
        </member>
        <member name="P:JB.Reactive.Threading.AsyncReaderWriterLock.ConcurrentNonExclusiveTaskScheduler">
            <summary>
            Gets the concurrent, non-exclusive task scheduler.
            </summary>
            <value>
            The concurrent non exclusive task scheduler.
            </value>
        </member>
        <member name="P:JB.Reactive.Threading.AsyncReaderWriterLock.ExclusiveTaskFactory">
            <summary>
            Gets the <see cref="T:System.Threading.Tasks.TaskFactory"/> to schedule exclusive, writer tasks.
            </summary>
            <value>
            The writer scheduler.
            </value>
        </member>
        <member name="P:JB.Reactive.Threading.AsyncReaderWriterLock.ExclusiveTaskScheduler">
            <summary>
            Gets the exclusive task scheduler.
            </summary>
            <value>
            The concurrent exclusive task scheduler.
            </value>
        </member>
        <member name="P:JB.Reactive.Threading.AsyncReaderWriterLock.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed.
            </summary>
            <value>
            <c>true</c> if this instance has been disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:JB.Reactive.Threading.AsyncReaderWriterLock.IsDisposing">
            <summary>
            Gets a value indicating whether this instance is currently disposing.
            </summary>
            <value>
            <c>true</c> if this instance is currently disposing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/> class.
            </summary>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLock.AcquireConcurrentReaderLockAsync(System.Threading.CancellationToken)">
            <summary>
            Acquires reader permissions sometimes in the future and returns the corresponding <see cref="T:JB.Reactive.Threading.ReaderWriterLock">ticket</see>.
            Please note - if you're using async and particularly await inside the lock (using block or prior to calling <see cref="M:JB.Reactive.Threading.ReaderWriterLock.Dispose"/>))
            it might not work as expected, see http://stackoverflow.com/questions/12068645/how-do-i-create-a-scheduler-which-never-executes-more-than-one-task-at-a-time-us#comment16125533_12069460
            </summary>
            <returns></returns>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLock.AcquireExclusiveWriterLockAsync(System.Threading.CancellationToken)">
            <summary>
            Acquires writer permissions sometimes in the future and returns the corresponding <see cref="T:JB.Reactive.Threading.ReaderWriterLock">ticket</see>.
            Please note - if you're using async and particularly await inside the lock (using block or prior to calling <see cref="M:JB.Reactive.Threading.ReaderWriterLock.Dispose"/>))
            it might not work as expected, see http://stackoverflow.com/questions/12068645/how-do-i-create-a-scheduler-which-never-executes-more-than-one-task-at-a-time-us#comment16125533_12069460
            </summary>
            <returns></returns>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLock.AcquireConcurrentReaderLock">
            <summary>
            Returns a (future) reader lock, as an observable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLock.AcquireExclusiveWriterLock">
            <summary>
            Returns a (future) exclusive writer lock, as an observable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLock.AcquireReadOrWriteLockObservable(System.Threading.Tasks.TaskFactory)">
            <summary>
            Acquires the read or write lock on the scheduler, as observable.
            </summary>
            <param name="schedulingTaskFactory">The task factory.</param>
            <returns></returns>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:JB.Reactive.Threading.AsyncReaderWriterLockExtensions">
            <summary>
            Extension Methods for <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/> instances.
            </summary>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLockExtensions.AddExclusiveWork``1(JB.Reactive.Threading.AsyncReaderWriterLock,System.Func{System.Threading.Tasks.Task{``0}},System.Threading.SynchronizationContext,System.Threading.CancellationToken)">
            <summary>
            Adds exclusive, non-concurrent work to the execution queue of the provided <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="asyncReaderWriterLock">The <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/> to schedule work on.</param>
            <param name="action">The action.</param>
            <param name="synchronizationContext">The synchronization context to execute the work on. If none is provided, <see cref="P:System.Threading.SynchronizationContext.Current" /> is used.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLockExtensions.AddExclusiveWork(JB.Reactive.Threading.AsyncReaderWriterLock,System.Func{System.Threading.Tasks.Task},System.Threading.SynchronizationContext,System.Threading.CancellationToken)">
            <summary>
            Adds exclusive, non-concurrent work to the execution queue of the provided <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock" />.
            </summary>
            <param name="asyncReaderWriterLock">The <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/> to schedule work on.</param>
            <param name="action">The action.</param>
            <param name="synchronizationContext">The synchronization context to execute the work on. If none is provided, <see cref="P:System.Threading.SynchronizationContext.Current" /> is used.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLockExtensions.AddExclusiveWork(JB.Reactive.Threading.AsyncReaderWriterLock,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.SynchronizationContext,System.Threading.CancellationToken)">
            <summary>
            Adds exclusive, non-concurrent work to the execution queue of the provided <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/>.
            </summary>
            <param name="asyncReaderWriterLock">The <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/> to schedule work on.</param>
            <param name="action">The action.</param>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLockExtensions.AddExclusiveWork``1(JB.Reactive.Threading.AsyncReaderWriterLock,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.SynchronizationContext,System.Threading.CancellationToken)">
            <summary>
            Adds exclusive, non-concurrent work to the execution queue of the provided <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/>.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="asyncReaderWriterLock">The <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/> to schedule work on.</param>
            <param name="action">The action.</param>
            <param name="synchronizationContext">The synchronization context to execute the work on. If none is provided, <see cref="P:System.Threading.SynchronizationContext.Current"/> is used.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLockExtensions.AddExclusiveWork(JB.Reactive.Threading.AsyncReaderWriterLock,System.IObservable{System.Reactive.Unit},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Adds exclusive, non-concurrent work to the execution queue of the provided <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/>.
            </summary>
            <param name="asyncReaderWriterLock">The <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/> to schedule work on.</param>
            <param name="workerObservable">The worker observable.</param>
            <param name="scheduler">The scheduler. If none is provided, <see cref="P:System.Reactive.Concurrency.Scheduler.Default"/> is used.</param>
            <returns></returns>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLockExtensions.AddExclusiveWork``1(JB.Reactive.Threading.AsyncReaderWriterLock,System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Adds exclusive, non-concurrent work to the execution queue of the provided <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/>.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="asyncReaderWriterLock">The <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/> to schedule work on.</param>
            <param name="workerObservable">The worker observable.</param>
            <param name="scheduler">The scheduler. If none is provided, <see cref="P:System.Reactive.Concurrency.Scheduler.Default"/> is used.</param>
            <returns></returns>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLockExtensions.AddConcurrentNonExclusiveWork``1(JB.Reactive.Threading.AsyncReaderWriterLock,System.Func{System.Threading.Tasks.Task{``0}},System.Threading.SynchronizationContext,System.Threading.CancellationToken)">
            <summary>
            Adds concurrent, non-exclusive work to the execution queue of the provided <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/>.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="asyncReaderWriterLock">The <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/> to schedule work on.</param>
            <param name="action">The action.</param>
            <param name="synchronizationContext">The synchronization context to execute the work on. If none is provided, <see cref="P:System.Threading.SynchronizationContext.Current"/> is used.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLockExtensions.AddConcurrentNonExclusiveWork(JB.Reactive.Threading.AsyncReaderWriterLock,System.Func{System.Threading.Tasks.Task},System.Threading.SynchronizationContext,System.Threading.CancellationToken)">
            <summary>
            Adds concurrent, non-exclusive work to the execution queue of the provided <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/>.
            </summary>
            <param name="asyncReaderWriterLock">The <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/> to schedule work on.</param>
            <param name="action">The action.</param>
            <param name="synchronizationContext">The synchronization context to execute the work on. If none is provided, <see cref="P:System.Threading.SynchronizationContext.Current"/> is used.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLockExtensions.AddConcurrentNonExclusiveWork(JB.Reactive.Threading.AsyncReaderWriterLock,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.SynchronizationContext,System.Threading.CancellationToken)">
            <summary>
            Adds concurrent, non-exclusive work to the execution queue of the provided <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/>.
            </summary>
            <param name="asyncReaderWriterLock">The <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/> to schedule work on.</param>
            <param name="action">The action.</param>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLockExtensions.AddConcurrentNonExclusiveWork``1(JB.Reactive.Threading.AsyncReaderWriterLock,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.SynchronizationContext,System.Threading.CancellationToken)">
            <summary>
            Adds concurrent, non-exclusive work to the execution queue of the provided <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/>.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="asyncReaderWriterLock">The <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/> to schedule work on.</param>
            <param name="action">The action.</param>
            <param name="synchronizationContext">The synchronization context to execute the work on. If none is provided, <see cref="P:System.Threading.SynchronizationContext.Current"/> is used.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLockExtensions.AddConcurrentNonExclusiveWork(JB.Reactive.Threading.AsyncReaderWriterLock,System.IObservable{System.Reactive.Unit},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Adds concurrent, non-exclusive work to the execution queue of the provided <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/>.
            </summary>
            <param name="asyncReaderWriterLock">The <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/> to schedule work on.</param>
            <param name="workerObservable">The worker observable.</param>
            <param name="scheduler">The scheduler. If none is provided, <see cref="P:System.Reactive.Concurrency.Scheduler.Default"/> is used.</param>
            <returns></returns>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLockExtensions.AddConcurrentNonExclusiveWork``1(JB.Reactive.Threading.AsyncReaderWriterLock,System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Adds concurrent, non-exclusive work to the execution queue of the provided <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/>.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="asyncReaderWriterLock">The <see cref="T:JB.Reactive.Threading.AsyncReaderWriterLock"/> to schedule work on.</param>
            <param name="workerObservable">The worker observable.</param>
            <param name="scheduler">The scheduler. If none is provided, <see cref="P:System.Reactive.Concurrency.Scheduler.Default"/> is used.</param>
            <returns></returns>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLockExtensions.PerformReaderWriterLockedWorkOnScheduler``1(System.IObservable{JB.Reactive.Threading.ReaderWriterLock},System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Schedules the actual work on the scheduler.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readerWriterLockObservable">The reader writer lock observable.</param>
            <param name="work">The work.</param>
            <param name="scheduler">The scheduler. If none is provided, <see cref="P:System.Reactive.Concurrency.Scheduler.CurrentThread"/> will be used.</param>
            <returns></returns>
        </member>
        <member name="M:JB.Reactive.Threading.AsyncReaderWriterLockExtensions.PerformReaderWriterLockedWorkOnSynchronizationContext``1(System.IObservable{JB.Reactive.Threading.ReaderWriterLock},System.IObservable{``0},System.Threading.SynchronizationContext)">
            <summary>
            Schedules the actual work on the synchronizationcontext.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readerWriterLockObservable">The reader writer lock observable.</param>
            <param name="work">The work.</param>
            <param name="synchronizationContext">The synchronization context. If none is provided, <see cref="P:System.Threading.SynchronizationContext.Current"/> will be used.</param>
            <returns></returns>
        </member>
        <member name="P:JB.Reactive.Threading.ReaderWriterLock.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:JB.Reactive.Threading.ReaderWriterLock.IsExclusive">
            <summary>
            Gets a value indicating whether this instance is exclusive.
            </summary>
            <value>
            <c>true</c> if this instance is exclusive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:JB.Reactive.Threading.ReaderWriterLock.IsConcurrent">
            <summary>
            Gets or sets a value indicating whether this instance is a non-exclusive, concurrent one.
            </summary>
            <value>
              <c>true</c> if this instance is concurrent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:JB.Reactive.Threading.ReaderWriterLock.InnerDisposable">
            <summary>
            Gets or sets the inner disposable.
            </summary>
            <value>
            The inner disposable.
            </value>
        </member>
        <member name="M:JB.Reactive.Threading.ReaderWriterLock.#ctor(System.Int64,System.Boolean,System.IDisposable)">
            <summary>
            Prevents a default instance of the <see cref="T:JB.Reactive.Threading.ReaderWriterLock" /> class from being created.
            </summary>
            <param name="id">The identifier.</param>
            <param name="isExclusive">if set to <c>true</c> [is exclusive].</param>
            <param name="innerDisposable">The inner disposable.</param>
        </member>
        <member name="M:JB.Reactive.Threading.ReaderWriterLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
    </members>
</doc>
